{"version":3,"sources":["logo.svg","OtherPage.js","Fib.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","to","Fib","state","seenIndexes","values","index","handleSubmit","event","a","async","preventDefault","axios","post","setState","this","fetchValues","fetchIndexes","get","data","map","number","join","entries","key","push","onSubmit","value","onChange","target","renderSeenIndexes","renderValues","Component","App","className","src","logo","alt","exact","path","component","OtherPage","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,0MCG5B,aACX,OACI,wDAEI,0BAAMC,GAAG,KAAT,mB,yECqEGC,E,2MAxEbC,MAAQ,CACNC,YAAa,GACbC,OAAQ,GACRC,MAAO,I,EAoBTC,aAAe,SAAMC,GAAN,SAAAC,EAAAC,OAAA,uDACbF,EAAMG,iBADO,WAAAF,EAAA,MAGPG,IAAMC,KAAK,cAAe,CAC9BP,MAAO,EAAKH,MAAMG,SAJP,OAMb,EAAKQ,SAAS,CAAER,MAAO,KANV,sC,mFAhBbS,KAAKC,cACLD,KAAKE,iB,sIAIgBL,IAAMM,IAAI,wB,OAAzBb,E,OACNU,KAAKD,SAAS,CAAET,OAAQA,EAAOc,O,wLAILP,IAAMM,IAAI,oB,OAA9Bd,E,OACNW,KAAKD,SAAS,CACZV,YAAaA,EAAYe,O,2FAc3B,OAAOJ,KAAKZ,MAAMC,YAAYgB,KAAI,qBAAGC,UAAqBC,KAAK,Q,qCAI/D,IAAMC,EAAU,GAEhB,IAAK,IAAIC,KAAOT,KAAKZ,MAAME,OACzBkB,EAAQE,KACN,yBAAKD,IAAKA,GAAV,aACaA,EADb,iBACgCT,KAAKZ,MAAME,OAAOmB,KAKtD,OAAOD,I,+BAGC,IAAD,OACP,OACE,6BACE,0BAAMG,SAAUX,KAAKR,cACnB,oDACA,2BACEoB,MAAOZ,KAAKZ,MAAMG,MAClBsB,SAAU,SAAApB,GAAK,OAAI,EAAKM,SAAS,CAAER,MAAOE,EAAMqB,OAAOF,WAEzD,2CAGF,oDACCZ,KAAKe,oBAEN,kDACCf,KAAKgB,oB,GAnEIC,aC8BHC,MA1Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,IAAD,CAAMpC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,cACF,6BACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,aAAaC,UAAWC,KAEpC,uBACEP,UAAU,WACVQ,KAAK,sBACLb,OAAO,SACPc,IAAI,uBAJN,mBCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.000f761f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {link} from 'react-router-dom';\r\n\r\nexport default () => {\r\n    return(\r\n        <div>\r\n            You are in a Multiverse!\r\n            <link to=\"/\">Back to Earth</link>\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Fib extends Component {\r\n  state = {\r\n    seenIndexes: [],\r\n    values: {},\r\n    index: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchValues();\r\n    this.fetchIndexes();\r\n  }\r\n\r\n  async fetchValues() {\r\n    const values = await axios.get('/api/values/current');\r\n    this.setState({ values: values.data });\r\n  }\r\n\r\n  async fetchIndexes() {\r\n    const seenIndexes = await axios.get('/api/values/all');\r\n    this.setState({\r\n      seenIndexes: seenIndexes.data\r\n    });\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    await axios.post('/api/values', {\r\n      index: this.state.index\r\n    });\r\n    this.setState({ index: '' });\r\n  };\r\n\r\n  renderSeenIndexes() {\r\n    return this.state.seenIndexes.map(({ number }) => number).join(', ');\r\n  }\r\n\r\n  renderValues() {\r\n    const entries = [];\r\n\r\n    for (let key in this.state.values) {\r\n      entries.push(\r\n        <div key={key}>\r\n          For index {key} I calculated {this.state.values[key]}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return entries;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Enter your index:</label>\r\n          <input\r\n            value={this.state.index}\r\n            onChange={event => this.setState({ index: event.target.value })}\r\n          />\r\n          <button>Submit</button>\r\n        </form>\r\n\r\n        <h3>Indexes I have seen:</h3>\r\n        {this.renderSeenIndexes()}\r\n\r\n        <h3>Calculated Values:</h3>\r\n        {this.renderValues()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fib;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport OtherPage from './OtherPage';\nimport Fib from './Fib';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/otherpage\">Other Page</Link>\n        <div>\n          <Route exact path=\"/\" component={Fib} />\n          <Route path=\"/otherpage\" component={OtherPage} />\n        </div>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}